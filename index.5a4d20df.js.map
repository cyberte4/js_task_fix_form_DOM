{"mappings":"ACGA,IAAM,EAAQ,SAAS,gBAAgB,CAAC,QAClC,EAAe,EAAE,CAElB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAqB,CACxB,IAAM,EAAS,AADZ,EAAA,KAAA,CACiB,gBAAgB,CAAC,SAEhC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAa,IAAI,CAAC,E,C,C,M,E,CADf,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGP,C,C,M,E,CANK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUA,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA6B,CAA7B,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,YAAY,CAAC,QAAS,eAC5B,EAAM,YAAY,CAAC,MAAO,EAAM,EAAE,EAElC,EAAM,WAAW,CACf,EAAM,IAAI,CAAC,EAAE,CAAC,iBAAiB,GAC/B,EAAM,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,WAAY,OAC1C,EAAM,qBAAqB,CAAC,cAAe,GAE3C,IAAM,EACJ,EAAM,IAAI,CAAC,EAAE,CAAC,iBAAiB,GAC/B,EAAM,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,WAAY,MAE1C,CAAA,EAAM,WAAW,CAAG,CACtB,C,C,M,E,CAhBK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar forms = document.querySelectorAll(\"form\");\nvar inputsHolder = [];\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = forms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var form = _step.value;\n        var inputs = form.querySelectorAll(\"input\");\n        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n        try {\n            for(var _iterator1 = inputs[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                var input = _step1.value;\n                inputsHolder.push(input);\n            }\n        } catch (err) {\n            _didIteratorError1 = true;\n            _iteratorError1 = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                    _iterator1.return();\n                }\n            } finally{\n                if (_didIteratorError1) {\n                    throw _iteratorError1;\n                }\n            }\n        }\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;\ntry {\n    // console.log(inputsHolder);\n    for(var _iterator2 = inputsHolder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n        var input1 = _step2.value;\n        var label = document.createElement(\"label\");\n        label.setAttribute(\"class\", \"field-label\");\n        label.setAttribute(\"for\", input1.id);\n        label.textContent = input1.name[0].toLocaleUpperCase() + input1.name.slice(1).replace(/([A-Z])/g, \" $1\");\n        input1.insertAdjacentElement(\"beforebegin\", label);\n        var placeholderText = input1.name[0].toLocaleUpperCase() + input1.name.slice(1).replace(/([A-Z])/g, \" $1\");\n        input1.placeholder = placeholderText;\n    }\n} catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n        }\n    } finally{\n        if (_didIteratorError2) {\n            throw _iteratorError2;\n        }\n    }\n}\n\n//# sourceMappingURL=index.5a4d20df.js.map\n","'use strict';\n\n// write code here\nconst forms = document.querySelectorAll('form');\nconst inputsHolder = [];\n\nfor (const form of forms) {\n  const inputs = form.querySelectorAll('input');\n\n  for (const input of inputs) {\n    inputsHolder.push(input);\n  }\n}\n\n// console.log(inputsHolder);\n\nfor (const input of inputsHolder) {\n  const label = document.createElement('label');\n\n  label.setAttribute('class', 'field-label');\n  label.setAttribute('for', input.id);\n\n  label.textContent =\n    input.name[0].toLocaleUpperCase() +\n    input.name.slice(1).replace(/([A-Z])/g, ' $1');\n  input.insertAdjacentElement('beforebegin', label);\n\n  const placeholderText =\n    input.name[0].toLocaleUpperCase() +\n    input.name.slice(1).replace(/([A-Z])/g, ' $1');\n\n  input.placeholder = placeholderText;\n}\n"],"names":["forms","document","querySelectorAll","inputsHolder","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","inputs","form","value","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","input","push","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","input1","label","createElement","setAttribute","id","textContent","name","toLocaleUpperCase","slice","replace","insertAdjacentElement","placeholderText","placeholder"],"version":3,"file":"index.5a4d20df.js.map"}